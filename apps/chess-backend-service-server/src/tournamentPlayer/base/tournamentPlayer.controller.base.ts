/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TournamentPlayerService } from "../tournamentPlayer.service";
import { TournamentPlayerCreateInput } from "./TournamentPlayerCreateInput";
import { TournamentPlayer } from "./TournamentPlayer";
import { TournamentPlayerFindManyArgs } from "./TournamentPlayerFindManyArgs";
import { TournamentPlayerWhereUniqueInput } from "./TournamentPlayerWhereUniqueInput";
import { TournamentPlayerUpdateInput } from "./TournamentPlayerUpdateInput";

export class TournamentPlayerControllerBase {
  constructor(protected readonly service: TournamentPlayerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TournamentPlayer })
  async createTournamentPlayer(
    @common.Body() data: TournamentPlayerCreateInput
  ): Promise<TournamentPlayer> {
    return await this.service.createTournamentPlayer({
      data: {
        ...data,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,

        tournament: data.tournament
          ? {
              connect: data.tournament,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TournamentPlayer] })
  @ApiNestedQuery(TournamentPlayerFindManyArgs)
  async tournamentPlayers(
    @common.Req() request: Request
  ): Promise<TournamentPlayer[]> {
    const args = plainToClass(TournamentPlayerFindManyArgs, request.query);
    return this.service.tournamentPlayers({
      ...args,
      select: {
        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TournamentPlayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tournamentPlayer(
    @common.Param() params: TournamentPlayerWhereUniqueInput
  ): Promise<TournamentPlayer | null> {
    const result = await this.service.tournamentPlayer({
      where: params,
      select: {
        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TournamentPlayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTournamentPlayer(
    @common.Param() params: TournamentPlayerWhereUniqueInput,
    @common.Body() data: TournamentPlayerUpdateInput
  ): Promise<TournamentPlayer | null> {
    try {
      return await this.service.updateTournamentPlayer({
        where: params,
        data: {
          ...data,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,

          tournament: data.tournament
            ? {
                connect: data.tournament,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          player: {
            select: {
              id: true,
            },
          },

          tournament: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TournamentPlayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTournamentPlayer(
    @common.Param() params: TournamentPlayerWhereUniqueInput
  ): Promise<TournamentPlayer | null> {
    try {
      return await this.service.deleteTournamentPlayer({
        where: params,
        select: {
          createdAt: true,
          id: true,

          player: {
            select: {
              id: true,
            },
          },

          tournament: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
