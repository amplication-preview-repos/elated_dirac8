/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TournamentPlayer as PrismaTournamentPlayer,
  Player as PrismaPlayer,
  Tournament as PrismaTournament,
} from "@prisma/client";

export class TournamentPlayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TournamentPlayerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tournamentPlayer.count(args);
  }

  async tournamentPlayers<T extends Prisma.TournamentPlayerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentPlayerFindManyArgs>
  ): Promise<PrismaTournamentPlayer[]> {
    return this.prisma.tournamentPlayer.findMany<Prisma.TournamentPlayerFindManyArgs>(
      args
    );
  }
  async tournamentPlayer<T extends Prisma.TournamentPlayerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentPlayerFindUniqueArgs>
  ): Promise<PrismaTournamentPlayer | null> {
    return this.prisma.tournamentPlayer.findUnique(args);
  }
  async createTournamentPlayer<T extends Prisma.TournamentPlayerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentPlayerCreateArgs>
  ): Promise<PrismaTournamentPlayer> {
    return this.prisma.tournamentPlayer.create<T>(args);
  }
  async updateTournamentPlayer<T extends Prisma.TournamentPlayerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentPlayerUpdateArgs>
  ): Promise<PrismaTournamentPlayer> {
    return this.prisma.tournamentPlayer.update<T>(args);
  }
  async deleteTournamentPlayer<T extends Prisma.TournamentPlayerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentPlayerDeleteArgs>
  ): Promise<PrismaTournamentPlayer> {
    return this.prisma.tournamentPlayer.delete(args);
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.tournamentPlayer
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }

  async getTournament(parentId: string): Promise<PrismaTournament | null> {
    return this.prisma.tournamentPlayer
      .findUnique({
        where: { id: parentId },
      })
      .tournament();
  }
}
