/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TournamentPlayer } from "./TournamentPlayer";
import { TournamentPlayerCountArgs } from "./TournamentPlayerCountArgs";
import { TournamentPlayerFindManyArgs } from "./TournamentPlayerFindManyArgs";
import { TournamentPlayerFindUniqueArgs } from "./TournamentPlayerFindUniqueArgs";
import { CreateTournamentPlayerArgs } from "./CreateTournamentPlayerArgs";
import { UpdateTournamentPlayerArgs } from "./UpdateTournamentPlayerArgs";
import { DeleteTournamentPlayerArgs } from "./DeleteTournamentPlayerArgs";
import { Player } from "../../player/base/Player";
import { Tournament } from "../../tournament/base/Tournament";
import { TournamentPlayerService } from "../tournamentPlayer.service";
@graphql.Resolver(() => TournamentPlayer)
export class TournamentPlayerResolverBase {
  constructor(protected readonly service: TournamentPlayerService) {}

  async _tournamentPlayersMeta(
    @graphql.Args() args: TournamentPlayerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TournamentPlayer])
  async tournamentPlayers(
    @graphql.Args() args: TournamentPlayerFindManyArgs
  ): Promise<TournamentPlayer[]> {
    return this.service.tournamentPlayers(args);
  }

  @graphql.Query(() => TournamentPlayer, { nullable: true })
  async tournamentPlayer(
    @graphql.Args() args: TournamentPlayerFindUniqueArgs
  ): Promise<TournamentPlayer | null> {
    const result = await this.service.tournamentPlayer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TournamentPlayer)
  async createTournamentPlayer(
    @graphql.Args() args: CreateTournamentPlayerArgs
  ): Promise<TournamentPlayer> {
    return await this.service.createTournamentPlayer({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,

        tournament: args.data.tournament
          ? {
              connect: args.data.tournament,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TournamentPlayer)
  async updateTournamentPlayer(
    @graphql.Args() args: UpdateTournamentPlayerArgs
  ): Promise<TournamentPlayer | null> {
    try {
      return await this.service.updateTournamentPlayer({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,

          tournament: args.data.tournament
            ? {
                connect: args.data.tournament,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TournamentPlayer)
  async deleteTournamentPlayer(
    @graphql.Args() args: DeleteTournamentPlayerArgs
  ): Promise<TournamentPlayer | null> {
    try {
      return await this.service.deleteTournamentPlayer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(
    @graphql.Parent() parent: TournamentPlayer
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tournament, {
    nullable: true,
    name: "tournament",
  })
  async getTournament(
    @graphql.Parent() parent: TournamentPlayer
  ): Promise<Tournament | null> {
    const result = await this.service.getTournament(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
