/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GameService } from "../game.service";
import { GameCreateInput } from "./GameCreateInput";
import { Game } from "./Game";
import { GameFindManyArgs } from "./GameFindManyArgs";
import { GameWhereUniqueInput } from "./GameWhereUniqueInput";
import { GameUpdateInput } from "./GameUpdateInput";
import { TournamentGameFindManyArgs } from "../../tournamentGame/base/TournamentGameFindManyArgs";
import { TournamentGame } from "../../tournamentGame/base/TournamentGame";
import { TournamentGameWhereUniqueInput } from "../../tournamentGame/base/TournamentGameWhereUniqueInput";

export class GameControllerBase {
  constructor(protected readonly service: GameService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Game })
  async createGame(@common.Body() data: GameCreateInput): Promise<Game> {
    return await this.service.createGame({
      data: data,
      select: {
        createdAt: true,
        gamePlayedAt: true,
        gamePlayer1: true,
        gamePlayer2: true,
        gameResult: true,
        id: true,
        playedAt: true,
        player1: true,
        player2: true,
        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Game] })
  @ApiNestedQuery(GameFindManyArgs)
  async games(@common.Req() request: Request): Promise<Game[]> {
    const args = plainToClass(GameFindManyArgs, request.query);
    return this.service.games({
      ...args,
      select: {
        createdAt: true,
        gamePlayedAt: true,
        gamePlayer1: true,
        gamePlayer2: true,
        gameResult: true,
        id: true,
        playedAt: true,
        player1: true,
        player2: true,
        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async game(
    @common.Param() params: GameWhereUniqueInput
  ): Promise<Game | null> {
    const result = await this.service.game({
      where: params,
      select: {
        createdAt: true,
        gamePlayedAt: true,
        gamePlayer1: true,
        gamePlayer2: true,
        gameResult: true,
        id: true,
        playedAt: true,
        player1: true,
        player2: true,
        result: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGame(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() data: GameUpdateInput
  ): Promise<Game | null> {
    try {
      return await this.service.updateGame({
        where: params,
        data: data,
        select: {
          createdAt: true,
          gamePlayedAt: true,
          gamePlayer1: true,
          gamePlayer2: true,
          gameResult: true,
          id: true,
          playedAt: true,
          player1: true,
          player2: true,
          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGame(
    @common.Param() params: GameWhereUniqueInput
  ): Promise<Game | null> {
    try {
      return await this.service.deleteGame({
        where: params,
        select: {
          createdAt: true,
          gamePlayedAt: true,
          gamePlayer1: true,
          gamePlayer2: true,
          gameResult: true,
          id: true,
          playedAt: true,
          player1: true,
          player2: true,
          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tournamentGames")
  @ApiNestedQuery(TournamentGameFindManyArgs)
  async findTournamentGames(
    @common.Req() request: Request,
    @common.Param() params: GameWhereUniqueInput
  ): Promise<TournamentGame[]> {
    const query = plainToClass(TournamentGameFindManyArgs, request.query);
    const results = await this.service.findTournamentGames(params.id, {
      ...query,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tournamentGames")
  async connectTournamentGames(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: TournamentGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tournamentGames: {
        connect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tournamentGames")
  async updateTournamentGames(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: TournamentGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tournamentGames: {
        set: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tournamentGames")
  async disconnectTournamentGames(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: TournamentGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tournamentGames: {
        disconnect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }
}
