/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tournament as PrismaTournament,
  TournamentGame as PrismaTournamentGame,
  TournamentPlayer as PrismaTournamentPlayer,
} from "@prisma/client";

export class TournamentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TournamentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tournament.count(args);
  }

  async tournaments<T extends Prisma.TournamentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentFindManyArgs>
  ): Promise<PrismaTournament[]> {
    return this.prisma.tournament.findMany<Prisma.TournamentFindManyArgs>(args);
  }
  async tournament<T extends Prisma.TournamentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentFindUniqueArgs>
  ): Promise<PrismaTournament | null> {
    return this.prisma.tournament.findUnique(args);
  }
  async createTournament<T extends Prisma.TournamentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentCreateArgs>
  ): Promise<PrismaTournament> {
    return this.prisma.tournament.create<T>(args);
  }
  async updateTournament<T extends Prisma.TournamentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentUpdateArgs>
  ): Promise<PrismaTournament> {
    return this.prisma.tournament.update<T>(args);
  }
  async deleteTournament<T extends Prisma.TournamentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentDeleteArgs>
  ): Promise<PrismaTournament> {
    return this.prisma.tournament.delete(args);
  }

  async findTournamentGames(
    parentId: string,
    args: Prisma.TournamentGameFindManyArgs
  ): Promise<PrismaTournamentGame[]> {
    return this.prisma.tournament
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tournamentGames(args);
  }

  async findTournamentPlayers(
    parentId: string,
    args: Prisma.TournamentPlayerFindManyArgs
  ): Promise<PrismaTournamentPlayer[]> {
    return this.prisma.tournament
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tournamentPlayers(args);
  }
}
