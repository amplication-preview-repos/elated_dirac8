/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tournament } from "./Tournament";
import { TournamentCountArgs } from "./TournamentCountArgs";
import { TournamentFindManyArgs } from "./TournamentFindManyArgs";
import { TournamentFindUniqueArgs } from "./TournamentFindUniqueArgs";
import { CreateTournamentArgs } from "./CreateTournamentArgs";
import { UpdateTournamentArgs } from "./UpdateTournamentArgs";
import { DeleteTournamentArgs } from "./DeleteTournamentArgs";
import { TournamentGameFindManyArgs } from "../../tournamentGame/base/TournamentGameFindManyArgs";
import { TournamentGame } from "../../tournamentGame/base/TournamentGame";
import { TournamentPlayerFindManyArgs } from "../../tournamentPlayer/base/TournamentPlayerFindManyArgs";
import { TournamentPlayer } from "../../tournamentPlayer/base/TournamentPlayer";
import { TournamentService } from "../tournament.service";
@graphql.Resolver(() => Tournament)
export class TournamentResolverBase {
  constructor(protected readonly service: TournamentService) {}

  async _tournamentsMeta(
    @graphql.Args() args: TournamentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tournament])
  async tournaments(
    @graphql.Args() args: TournamentFindManyArgs
  ): Promise<Tournament[]> {
    return this.service.tournaments(args);
  }

  @graphql.Query(() => Tournament, { nullable: true })
  async tournament(
    @graphql.Args() args: TournamentFindUniqueArgs
  ): Promise<Tournament | null> {
    const result = await this.service.tournament(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tournament)
  async createTournament(
    @graphql.Args() args: CreateTournamentArgs
  ): Promise<Tournament> {
    return await this.service.createTournament({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Tournament)
  async updateTournament(
    @graphql.Args() args: UpdateTournamentArgs
  ): Promise<Tournament | null> {
    try {
      return await this.service.updateTournament({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tournament)
  async deleteTournament(
    @graphql.Args() args: DeleteTournamentArgs
  ): Promise<Tournament | null> {
    try {
      return await this.service.deleteTournament(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TournamentGame], { name: "tournamentGames" })
  async findTournamentGames(
    @graphql.Parent() parent: Tournament,
    @graphql.Args() args: TournamentGameFindManyArgs
  ): Promise<TournamentGame[]> {
    const results = await this.service.findTournamentGames(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TournamentPlayer], { name: "tournamentPlayers" })
  async findTournamentPlayers(
    @graphql.Parent() parent: Tournament,
    @graphql.Args() args: TournamentPlayerFindManyArgs
  ): Promise<TournamentPlayer[]> {
    const results = await this.service.findTournamentPlayers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
