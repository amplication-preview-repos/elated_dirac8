/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TournamentGameService } from "../tournamentGame.service";
import { TournamentGameCreateInput } from "./TournamentGameCreateInput";
import { TournamentGame } from "./TournamentGame";
import { TournamentGameFindManyArgs } from "./TournamentGameFindManyArgs";
import { TournamentGameWhereUniqueInput } from "./TournamentGameWhereUniqueInput";
import { TournamentGameUpdateInput } from "./TournamentGameUpdateInput";

export class TournamentGameControllerBase {
  constructor(protected readonly service: TournamentGameService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TournamentGame })
  async createTournamentGame(
    @common.Body() data: TournamentGameCreateInput
  ): Promise<TournamentGame> {
    return await this.service.createTournamentGame({
      data: {
        ...data,

        game: data.game
          ? {
              connect: data.game,
            }
          : undefined,

        tournament: data.tournament
          ? {
              connect: data.tournament,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TournamentGame] })
  @ApiNestedQuery(TournamentGameFindManyArgs)
  async tournamentGames(
    @common.Req() request: Request
  ): Promise<TournamentGame[]> {
    const args = plainToClass(TournamentGameFindManyArgs, request.query);
    return this.service.tournamentGames({
      ...args,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TournamentGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tournamentGame(
    @common.Param() params: TournamentGameWhereUniqueInput
  ): Promise<TournamentGame | null> {
    const result = await this.service.tournamentGame({
      where: params,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        tournament: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TournamentGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTournamentGame(
    @common.Param() params: TournamentGameWhereUniqueInput,
    @common.Body() data: TournamentGameUpdateInput
  ): Promise<TournamentGame | null> {
    try {
      return await this.service.updateTournamentGame({
        where: params,
        data: {
          ...data,

          game: data.game
            ? {
                connect: data.game,
              }
            : undefined,

          tournament: data.tournament
            ? {
                connect: data.tournament,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,

          tournament: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TournamentGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTournamentGame(
    @common.Param() params: TournamentGameWhereUniqueInput
  ): Promise<TournamentGame | null> {
    try {
      return await this.service.deleteTournamentGame({
        where: params,
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,

          tournament: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
