/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TournamentGame as PrismaTournamentGame,
  Game as PrismaGame,
  Tournament as PrismaTournament,
} from "@prisma/client";

export class TournamentGameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TournamentGameCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tournamentGame.count(args);
  }

  async tournamentGames<T extends Prisma.TournamentGameFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentGameFindManyArgs>
  ): Promise<PrismaTournamentGame[]> {
    return this.prisma.tournamentGame.findMany<Prisma.TournamentGameFindManyArgs>(
      args
    );
  }
  async tournamentGame<T extends Prisma.TournamentGameFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentGameFindUniqueArgs>
  ): Promise<PrismaTournamentGame | null> {
    return this.prisma.tournamentGame.findUnique(args);
  }
  async createTournamentGame<T extends Prisma.TournamentGameCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentGameCreateArgs>
  ): Promise<PrismaTournamentGame> {
    return this.prisma.tournamentGame.create<T>(args);
  }
  async updateTournamentGame<T extends Prisma.TournamentGameUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentGameUpdateArgs>
  ): Promise<PrismaTournamentGame> {
    return this.prisma.tournamentGame.update<T>(args);
  }
  async deleteTournamentGame<T extends Prisma.TournamentGameDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TournamentGameDeleteArgs>
  ): Promise<PrismaTournamentGame> {
    return this.prisma.tournamentGame.delete(args);
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.tournamentGame
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }

  async getTournament(parentId: string): Promise<PrismaTournament | null> {
    return this.prisma.tournamentGame
      .findUnique({
        where: { id: parentId },
      })
      .tournament();
  }
}
