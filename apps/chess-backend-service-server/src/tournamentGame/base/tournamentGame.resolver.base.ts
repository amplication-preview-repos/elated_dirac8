/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TournamentGame } from "./TournamentGame";
import { TournamentGameCountArgs } from "./TournamentGameCountArgs";
import { TournamentGameFindManyArgs } from "./TournamentGameFindManyArgs";
import { TournamentGameFindUniqueArgs } from "./TournamentGameFindUniqueArgs";
import { CreateTournamentGameArgs } from "./CreateTournamentGameArgs";
import { UpdateTournamentGameArgs } from "./UpdateTournamentGameArgs";
import { DeleteTournamentGameArgs } from "./DeleteTournamentGameArgs";
import { Game } from "../../game/base/Game";
import { Tournament } from "../../tournament/base/Tournament";
import { TournamentGameService } from "../tournamentGame.service";
@graphql.Resolver(() => TournamentGame)
export class TournamentGameResolverBase {
  constructor(protected readonly service: TournamentGameService) {}

  async _tournamentGamesMeta(
    @graphql.Args() args: TournamentGameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TournamentGame])
  async tournamentGames(
    @graphql.Args() args: TournamentGameFindManyArgs
  ): Promise<TournamentGame[]> {
    return this.service.tournamentGames(args);
  }

  @graphql.Query(() => TournamentGame, { nullable: true })
  async tournamentGame(
    @graphql.Args() args: TournamentGameFindUniqueArgs
  ): Promise<TournamentGame | null> {
    const result = await this.service.tournamentGame(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TournamentGame)
  async createTournamentGame(
    @graphql.Args() args: CreateTournamentGameArgs
  ): Promise<TournamentGame> {
    return await this.service.createTournamentGame({
      ...args,
      data: {
        ...args.data,

        game: args.data.game
          ? {
              connect: args.data.game,
            }
          : undefined,

        tournament: args.data.tournament
          ? {
              connect: args.data.tournament,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TournamentGame)
  async updateTournamentGame(
    @graphql.Args() args: UpdateTournamentGameArgs
  ): Promise<TournamentGame | null> {
    try {
      return await this.service.updateTournamentGame({
        ...args,
        data: {
          ...args.data,

          game: args.data.game
            ? {
                connect: args.data.game,
              }
            : undefined,

          tournament: args.data.tournament
            ? {
                connect: args.data.tournament,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TournamentGame)
  async deleteTournamentGame(
    @graphql.Args() args: DeleteTournamentGameArgs
  ): Promise<TournamentGame | null> {
    try {
      return await this.service.deleteTournamentGame(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Game, {
    nullable: true,
    name: "game",
  })
  async getGame(
    @graphql.Parent() parent: TournamentGame
  ): Promise<Game | null> {
    const result = await this.service.getGame(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tournament, {
    nullable: true,
    name: "tournament",
  })
  async getTournament(
    @graphql.Parent() parent: TournamentGame
  ): Promise<Tournament | null> {
    const result = await this.service.getTournament(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
